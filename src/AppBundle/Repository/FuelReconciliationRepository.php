<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Department;
use AppBundle\Entity\Driver;
use AppBundle\Entity\Project;
use AppBundle\Entity\Vehicle;

/**
 * FuelReconciliationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FuelReconciliationRepository extends \Doctrine\ORM\EntityRepository
{

    public function getReconciliations($driverID, $vehicleID, $departmentID, $projectID, \DateTime $firstDate, \DateTime $scondDate){
        $query = $this->createQueryBuilder('fr')
            ->select('fr')
            ->leftJoin('fr.driver','driver')
            ->leftJoin('fr.vehicle','vehicle')
            ->leftJoin('fr.department','department')
            ->leftJoin('fr.project','project');
        $queryRes = $this->generateWhere($driverID, $vehicleID, $departmentID, $projectID, $firstDate, $scondDate,$query);


        return $queryRes->getResult();
    }
  
    public function getDriversName(){
        $query = $this->createQueryBuilder('d')
            ->select('DISTINCT d.lastName')
            ->orderBy('d.lastName', 'DESC')
            ->getQuery();
        return $query->getResult();
    }

    public function getSubTotals(){
        $query = $this->createQueryBuilder('fr')
            ->select('SUM(fr.amount) as totalAmount ,SUM(fr.liters) as totalLiters , driver.lastName, driver.firstName')
            ->leftJoin('fr.driver','driver')
            ->groupBy('driver.lastName')
            ->orderBy('driver.lastName', 'DESC')
            ->getQuery();
        return $query->getResult();

    }

    public function getTotal(){
        $query = $this->createQueryBuilder('fr')
            ->select('SUM(fr.amount) as totalAmount ')
            ->getQuery();
        return $query->getResult();

    }

    public function generateWhere($driverID, $vehicleID, $departmentID, $projectID, \DateTime $firstDate, \DateTime $scondDate, $query)
    {
        $conds = '1=1 ';
        if ($driverID !== 0) {
            $conds .= 'AND driver.id = ?1';
            $query->setParameter(1,$driverID);
        } 
        if ($vehicleID !== 0) {
            $conds .= 'AND vehicle.id = ?2';
            $query->setParameter(2,$vehicleID);
        }
        if($departmentID !== 0){
            $conds .= 'AND department.id = ?3';
            $query->setParameter(3,$departmentID);
        }
        if($projectID !== 0){
            $conds .= 'AND project.id = ?4';
            $query->setParameter(4,$projectID);
        }
        if($firstDate !== null&&$scondDate!== null){
            $conds.= 'AND fr.dateCreation BETWEEN :firstDate AND :scondDate';
            $query->setParameter('firstDate',$firstDate->format('Y-m-d'))
            ->setParameter('scondDate',$scondDate->format('Y-m-d'));
        }
        
        $res =$query ->where($conds)
        ->orderBy('driver.lastName', 'DESC')
        ->getQuery();
        return $res;
    }
}
